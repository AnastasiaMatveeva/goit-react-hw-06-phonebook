{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/phonebook/phonebook-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/phonebook/phonebook-reducer.js","redux/phonebook/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","createContact","createAction","payload","name","number","id","uuidv4","deleteContact","changeFilter","ContactForm","state","changeInput","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","s","contactForm","htmlFor","contactForm__label","type","contactForm__input","onChange","pattern","title","required","Component","connect","dispatch","phonebookActions","contacts","filter","normilizedFilter","toLowerCase","contact","includes","getVisibleContacts","disptch","onDeleteContact","contactList","map","item","key","contactList__item","onClick","onChangeInput","e","target","App","createReducer","actions","_","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40b065c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__2a_qN\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst createContact = createAction('phonebook/create', ({ name, number }) => ({\n        payload: {\n            name,\n            number,\n            id: uuidv4(),\n        },\n     } ))\n\n// const createContact = ({ name, number }) => ({\n//     type: types.CREATE,\n//     payload: {\n//         name,\n//         number,\n//         id: uuidv4(),\n//     }\n// })\nconst deleteContact = createAction('phonebook/delete')\n// const deleteContact = (contactId) => ({\n//     type: types.DELETE,\n//     payload: contactId\n// })\n\nconst changeFilter  = createAction('phonebook/changeFilter')\n// const changeFilter = value => ({\n//     type: types.CHANGE_FILTER,\n//     payload: value,\n// })\nexport default {createContact, deleteContact, changeFilter}","import React, { Component } from 'react';\nimport s from './ContactForm.module.css';\nimport {connect} from 'react-redux';\nimport phonebookActions from '../../redux/phonebook/phonebook-actions';\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  changeInput = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={s.contactForm}>\n        <label htmlFor=\"name\" className={s.contactForm__label}>\n          Name\n          <br />\n          <input\n            type=\"text\"\n            className={s.contactForm__input}\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.changeInput}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <br />\n        <label htmlFor=\"number\" className={s.contactForm__label}>\n          Number\n          <br />\n          <input\n            type=\"tel\"\n            className={s.contactForm__input}\n            name=\"number\"\n            value={this.state.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            onChange={this.changeInput}\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <br />\n        <button type=\"submit\">AddContact</button>\n      </form>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({name, number}) => dispatch(phonebookActions.createContact({name, number}))\n})\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport {connect} from 'react-redux';\nimport phonebookActions from '../../redux/phonebook/phonebook-actions';\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={s.contactList}>\n      {contacts.map(item => (\n        <li key={item.id} className={s.contactList__item}>\n          {item.name}: {item.number}\n          <button type=\"button\" onClick={() => onDeleteContact(item.id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst getVisibleContacts = (contacts, filter) => {\n  const normilizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normilizedFilter),\n  );\n}\n\nconst mapStateToProps = state => {\n  const {filter, contacts} = state.contacts;\n\n  const visibleContacts = getVisibleContacts(contacts, filter);\n\n  return {\n    contacts: visibleContacts\n  }\n}\n\nconst mapDispatchToProps = disptch => ({\n  onDeleteContact: (id) => disptch(phonebookActions.deleteContact(id)),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  array: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport phonebookActions from '../../redux/phonebook/phonebook-actions';\nconst Filter = ({ value, onChangeInput }) => {\n  return (\n    <label htmlFor=\"filter\">\n      <h2>Filter contact by name</h2>\n      <input name=\"filter\" onChange={onChangeInput} value={value} />\n    </label>\n  );\n};\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChangeInput: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n})\nconst mapDispatchToProps = dispatch => ({\n  onChangeInput: e => dispatch(phonebookActions.changeFilter(e.target.value))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nclass App extends Component {\n  // state = {\n  //   contacts: [],\n  //   filter: '',\n  // };\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({\n  //       contacts: parsedContacts,\n  //     });\n  //   }\n  // }\n  // componentDidUpdate(prevState) {\n  //   console.log('component did update');\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     console.log('обновилось поле todo');\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n  changeInput = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n  // createContact = ({ name, number }) => {\n  //   const { contacts } = this.state;\n  //   const isContactExist = contacts.find(contact => contact.name === name);\n  //   if (isContactExist) {\n  //     alert(`${name} is already exist in contacts`);\n  //     return;\n  //   }\n  //   const id = uuidv4();\n  //   const newContact = {\n  //     name,\n  //     number,\n  //     id: id,\n  //   };\n  //   this.setState(prevState => ({\n  //     contacts: [...prevState.contacts, newContact],\n  //   }));\n  // };\n\n  // deleteContact = id => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== id),\n  //   }));\n  // };\n\n  render() {\n   \n\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <div>\n          <h1>Contacts</h1>\n          <Filter/>\n          <ContactList\n\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import types from './phonebook-types'\nimport actions from './phonebook-actions'\n\n\nconst contacts = createReducer([],{\n    [actions.createContact]: (state, {payload}) => [...state, payload],\n    [actions.deleteContact]: (state, {payload}) => \n    state.filter(contact => contact.id !== payload),\n})\n\n// const contacts = (state = [], {type, payload}) => {\n\n//     switch(type) {\n//         case types.CREATE:\n//             return [...state, payload];\n        \n//         case types.DELETE:\n//             return state.filter(contact => contact.id !== payload)\n//         default:  \n//             return state;  \n//     }\n    \n// }\n// const filter = (state = '', {type, payload}) => {\n    \n//     switch(type) {\n//         case types.CHANGE_FILTER:\n//             return payload;\n//         default:\n//             return state;\n//     }\n    \n// }\n\nconst filter = createReducer('', {\n    [actions.changeFilter]: (_, {payload}) => payload,\n})\n// const filter = (state = '', {type, payload}) => {\n    \n//     switch(type) {\n//         case 'phonebook/changeFilter':\n//             return payload;\n//         default:\n//             return state;\n//     }\n    \n// }\nexport default combineReducers({\n    contacts, \n    filter\n})","// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './phonebook-reducer';\nimport { configureStore } from '@reduxjs/toolkit';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n});\n// const store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/phonebook/store';\nimport {Provider} from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store ={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__OrlO3\",\"contactForm__label\":\"ContactForm_contactForm__label__3pb-5\",\"contactForm__input\":\"ContactForm_contactForm__input__2v3OT\"};"],"sourceRoot":""}